AWSTemplateFormatVersion: 2010-09-09
Description: "Provides AWS Operations Management Platform tenant setup / implementation. Run once for each AWS Account to be managed"
Parameters:
  CentralAccount:
    Type: String
    Default: 'replaceaccount'
    Description: Provide the AWS Account number for the central / management account. For single account environments provide the single AWS account number.

  CentralRegion:
    Type: String
    Default: "us-gov-east-1"
    Description: Provide the central / primary region for the Management Account
    AllowedValues:
      - us-gov-east-1
      - us-gov-west-1
      - us-gov-secret-1
      - us-gov-topsecret-1
      - us-gov-topsecret-2
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2

  SecondaryRegion:
    Type: String
    Default: "us-gov-west-1"
    Description: Provide the secondary region for the Management Account
    AllowedValues:
      - us-gov-east-1
      - us-gov-west-1
      - us-gov-secret-1
      - us-gov-topsecret-1
      - us-gov-topsecret-2
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2

  CentralS3Bucket:
    Type: String
    Default: "hcom-software-distribution-replaceaccount-replaceregion"
    Description: Central S3 distribution Bucket previously used to deploy the HCOM-Ops-Foundation template with all the staged software 

  PrincipalOrgID:
    Type: String
    Default: 'o-replaceorg'
    Description: Replace with the principal Organization ID from AWS Organizations. This is required to enable multi / cross-account features that provide centralized management and automation.

  HCOMKey:
    Type: String
    Default: 'mrk-replacekey'
    Description: Replace with the Central Account KMS Key ID that will be used to encrypt services.
  
  OwnerTag:
    Type: String
    Default: 'replace@email.com'
    Description: Replace with the email for the system Owner tag that will be added to all resources that support the tag.
  
  IsCentralAccount:
    Type: String
    Default: Central
    Description: Are you deploying this template to the Central Management Account or Tenant Cross-Account? The Tenant Account creates AWS configurations not required when deployed to Central Account.
    AllowedValues:
      - Central
      - Tenant
      
  DeploymentRegion:
    Type: String
    Default: Primary
    Description: Are you deploying this template to the Primary or Secondary region? The Primary region creates global objects that should not be recreated in secondary regions.
    AllowedValues:
      - Primary
      - Secondary

Conditions:
  isTenant: !Equals [!Ref IsCentralAccount, Tenant]
  isSecondary: !Equals [!Ref DeploymentRegion, Secondary]
  isPrimary: !Equals [!Ref DeploymentRegion, Primary]

  isTenantSecondary: !And
    - !Condition isTenant
    - !Condition isSecondary

  CreatePrimaryOnlyResources: !Equals
    - !Ref DeploymentRegion
    - Primary
  CreateTenantOnlyResources: !Equals
    - !Ref IsCentralAccount
    - Tenant

Resources:
  PlatformCrossAccountRole:
    Type: AWS::IAM::Role
    Condition: CreatePrimaryOnlyResources
    Properties: 
      RoleName: HCOM-CrossAccount-Automation
      Description: For deployment tenant accounts (in a cross-account environment) grants use by central/management Lambda Automation
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:${AWS::Partition}:iam::${CentralAccount}:root'
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service:
                - 'events.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMReadOnlyAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess'
      Path: /
      Policies: 
        - PolicyName: HCOM-CrossAccount-automation-policy1
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'backup:DescribeProtectedResource'
                  - 'ssm:AddTagsToResource'
                  - 'ssm:SendCommand'
                  - 'ssm:CreateAssociation'
                  - 'ssm:CreateDocument'
                  - 'ssm:DeleteDocument'
                  - 'ssm:deleteAssociation'
                  - 'ssm:StartAssociationsOnce'
                  - 'ssm:UpdateAssociation'
                  - 'ssm:UpdaeAssociationStatus'
                  - 'ssm:DeleteParameter'
                  - 'ssm:DescribeAssociation'
                  - 'ssm:DescribeAssociationExecutions'
                  - 'ssm:DescribeAssociationExecutionTargets'
                  - 'ssm:DescribeDocument'
                  - 'ssm:GetCalendar'
                  - 'ssm:PutCalendar'
                  - 'ssm:GetDocument'
                  - 'ssm:GetCalendarState'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListAssociationVersions'
                  - 'ssm:ListComplianceItems'
                  - 'ssm:ListComplianceSummaries'
                  - 'ssm:ListDocuments'
                  - 'ssm:ListDocumentVersions'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutParameter'
                  - 'ec2:CreateTags'
                  - 'ssm:GetCommandInvocation'
                  - 'events:PutEvents'
                  - 'iam:ListAttachedRolePolicies'
                  - 'iam:GetInstanceProfile'
                  - 'cloudwatch:GetMetricData'
                  - 'cloudwatch:ListMetrics'
                  - 'elasticfilesystem:DescribeTags'
                  - 'elasticfilesystem:DescribeFileSystems'
                  - 'securityhub:GetEnabledStandards'
                  - 'securityhub:BatchEnableStandards'
                  - 'securityhub:BatchDisableStandards'
                  - 'securityhub:DisableSecurityHub'
                  - 'securityhub:EnableSecurityHub'
                  - 'dynamodb:ListTagsOfResource'
                  - 'dynamodb:ListTables'
                  - 'rds:ListTagsForResource'
                  - 'rds:DescribeDBInstances'
                  - 'sqs:SendMessage'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'Lambda:InvokeFunction'
                Resource: !Sub 'arn:${AWS::Partition}:lambda:*:${CentralAccount}:function:HCOM-SQS-Processor'
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                Resource: !Sub 'arn:${AWS::Partition}:kms:${CentralRegion}:${CentralAccount}:key/${HCOMKey}'


  PushCustomMetricRunDoc: 
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 'Run a script on Windows and Linux instances to capture custom metric value and push metric to CloudWatch'
        parameters:
          metricpath:
            type: String
            description: contains the path to the output from the canary script. 1 = not clean (throw alarm) 0 = clean. or C:\\ProgramData\\Amazon\\SSM\\Download\\custom-metric-status.txt for Windows
            default: '/etc/amazon/ssm/custom-metric-status.txt'
          metricname:
            type: String
            description: contains the name of the Custom Metric
            default: 'replace with metric name'
          metricnamespace:
            type: String
            description: contains the namespace of the Custom Metric
            default: 'Custom'
        mainSteps:
          - action: aws:runPowerShellScript
            name: ReadPushCustomWin
            precondition:
                      StringEquals:
                      - platformType
                      - Windows  
            inputs:
              timeoutSeconds: "90"
              Parameters:
                metricpath:
                - '{{metricpath}}'
                metricname:
                - '{{metricname}}'
                metricnamespace:
                - '{{metricnamespace}}'
              runCommand:
                - Import-Module AWSPowerShell; $instance = $env:AWS_SSM_INSTANCE_ID;
                - $monitor_status = Get-Content {{metricpath}};
                - echo 'var check:' $instance {{metricpath}} {{metricname}} {{metricnamespace}} $monitor_status
                - $Metric = [Amazon.CloudWatch.Model.MetricDatum]::new();
                - $Dimension = [Amazon.CloudWatch.Model.Dimension]::new();
                - $Dimension.Name = "Instance";
                - $Dimension.Value = $instance;
                - $Metric.Dimensions = $Dimension;
                - $Metric.MetricName = {{metricname}}; 
                - $Metric.Value = $monitor_status;
                - Write-CWMetricData -MetricData $Metric -Namespace {{metricnamespace}} -Region us-gov-east-1
          - action: aws:runShellScript
            name: ReadPushCustomLinux
            precondition:
                      StringEquals:
                      - platformType
                      - Linux
            inputs:
              timeoutSeconds: "60"
              runCommand:
              - awsregion=$(aws configure get region);
              - if [ "$awsregion" = '' ]; then aws configure set region us-gov-west-1; fi;
              - instance=$(ls -al /var/lib/cloud/ | grep -iUE "/var/lib/cloud/instances/" | sed -e "s/^.*instances\///");
              - monitor_status=$(cat {{metricpath}});
              - echo $instance {{metricpath}} {{metricname}} {{metricnamespace}} $monitor_status
              - aws cloudwatch put-metric-data --metric-name {{metricname}} --namespace {{metricnamespace}} --value $monitor_status --dimensions Instance=$instance;
      DocumentType: Command
      Name: "HCOM-CloudWatch-Push-Custom-Metric"

  PushEC2StateEBRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "push EC2 state changes to Central Account"
      EventBusName: "default"
      EventPattern:
        source:  
          - "aws.ec2"
        detail-type: 
          - "EC2 Instance State-change Notification"
        detail:
          state: 
            - "stopping"
            - "running"
            - "terminated"
      Name: "HCOM-Tenant-Push-Events-To-Central"
      State: "ENABLED"
      Targets: 
        - 
          Arn: !Join
                - ''
                - - !Sub 'arn:${AWS::Partition}:events:'
                  - !Sub '${CentralRegion}'
                  - !Sub ':${CentralAccount}:event-bus/HCOM-Central-EB'
          Id: Target1
          RoleArn: !If [isPrimary, !GetAtt EventBridgeIAMrole.Arn,{"Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/HCOM-CrossAccount-Automation"} ] 
          DeadLetterConfig:
            Arn: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${CentralAccount}:HCOM-DeadLetterQueue
  
  PushEC2RebootEBRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "push EC2 reboot event to Central Account"
      EventBusName: "default"
      EventPattern:
        source:  
          - "aws.ec2"
        detail-type: 
          - "AWS API Call via CloudTrail"
        detail:
          eventSource: 
            - "ec2.amazonaws.com"
          eventName: 
            - "RebootInstances"
      Name: "HCOM-Tenant-Push-Reboots-To-Central"
      State: "ENABLED"
      Targets: 
        - 
          Arn: {"Fn::Sub": "arn:${AWS::Partition}:events:${CentralRegion}:${CentralAccount}:event-bus/HCOM-Central-EB"}
          Id: Target1
          RoleArn: !GetAtt EventBridgeIAMrole.Arn
          DeadLetterConfig:
            Arn: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${CentralAccount}:HCOM-DeadLetterQueue
  
  EventBridgeIAMrole:
    Type: 'AWS::IAM::Role'
    Condition: CreatePrimaryOnlyResources
    Properties:
      RoleName: HCOM-Push-Events-to-Central-EB
      Description: Enables local rules to push to central EB
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: HCOM-Event-Bus-Tenant-To-Central
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'events:PutEvents'
                Resource:
                  - {"Fn::Sub": "arn:${AWS::Partition}:events:${CentralRegion}:${CentralAccount}:event-bus/HCOM-Central-EB"}

  PushBackupEventsEBRulePrim:
    Type: AWS::Events::Rule
    Condition: CreatePrimaryOnlyResources
    Properties: 
      Description: "push Backup state changes to Central Account"
      EventBusName: "default"
      EventPattern:
        source:  
          - "aws.backup"
        detail-type: 
          - "Backup Job State Change"
        detail:
          state: 
            - "FAILED"
            - "EXPIRED"
            - "COMPLETED"
      Name: "HCOM-Tenant-Push-Backup-Events-To-Central"
      State: "ENABLED"
      Targets: 
        - 
          Arn: {"Fn::Sub": "arn:${AWS::Partition}:events:${CentralRegion}:${CentralAccount}:event-bus/HCOM-Central-EB"}
          Id: Target1
          RoleArn: !GetAtt EventBridgeIAMrole.Arn
          DeadLetterConfig:
            Arn: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${CentralAccount}:HCOM-DeadLetterQueue

  PushRestoreEventsEBRulePrim:
    Type: AWS::Events::Rule
    Condition: CreatePrimaryOnlyResources
    Properties: 
      Description: "push Restore state changes to Central Account"
      EventBusName: "default"
      EventPattern:
        source:  
          - "aws.backup"
        detail-type: 
          - "Restore Job State Change"
        detail:
          status: 
            - "FAILED"
            - "COMPLETED"
      Name: "HCOM-Tenant-Push-Restore-Events-To-Central"
      State: "ENABLED"
      Targets: 
        - 
          Arn: {"Fn::Sub": "arn:${AWS::Partition}:events:${CentralRegion}:${CentralAccount}:event-bus/HCOM-Central-EB"}
          Id: Target1
          RoleArn: !GetAtt EventBridgeIAMrole.Arn
          DeadLetterConfig:
            Arn: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${CentralAccount}:HCOM-DeadLetterQueue

  PushOnPremEventsEBRulePrim:
    Type: AWS::Events::Rule
    Condition: CreatePrimaryOnlyResources
    Properties: 
      Description: "push OnPrem state changes to Central Account"
      EventBusName: "default"
      EventPattern:
        source:  
          - "hcom.onprem"
        detail-type: 
          - "OnPrem-Instance-State-Change-Notification"
        detail:
          state: 
            - "running"
            - "stopped"
      Name: "HCOM-Tenant-Push-OnPrem-Events-To-Central"
      State: "ENABLED"
      Targets: 
        - 
          Arn: {"Fn::Sub": "arn:${AWS::Partition}:events:${CentralRegion}:${CentralAccount}:event-bus/HCOM-Central-EB"}
          Id: Target1
          RoleArn: !GetAtt EventBridgeIAMrole.Arn
          DeadLetterConfig:
            Arn: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${CentralAccount}:HCOM-DeadLetterQueue

  AWSSystemsManagerAutomationExecutionRole:
    Type: AWS::IAM::Role
    Condition: CreatePrimaryOnlyResources
    Properties: 
      RoleName: AWS-SystemsManager-AutomationExecutionRole-HCOM
      Description: AWS Account ID of the primary account (the account from which AWS Systems Manager Automation will be initiated).
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - {"Fn::Sub": "arn:${AWS::Partition}:iam::${CentralAccount}:root"}
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                  "aws:PrincipalOrgID": !Ref PrincipalOrgID
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ssm.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies: 
        - PolicyName: HCOM-SSM-ExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: 
                  - {"Fn::Sub": "arn:${AWS::Partition}:lambda:*:function:HCOM-*"}
                  - {"Fn::Sub": "arn:${AWS::Partition}:lambda:*:function:Automation-*"}
              - Effect: Allow
                Action:
                  - 'ec2:CreateImage'
                  - 'ec2:CopyImage'
                  - 'ec2:DeregisterImage'
                  - 'ec2:DescribeImages'
                  - 'ec2:DeleteSnapshot'
                  - 'ec2:StartInstances'
                  - 'ec2:RunInstances'
                  - 'ec2:StopInstances'
                  - 'ec2:TerminateInstances'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:CreateTags'
                  - 'ec2:DeleteTags'
                  - 'ec2:DescribeTags'
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DescribeStackEvents'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:DeleteStack'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssm:*'
                Resource: '*'

  EC2ServerRole:
      Type: AWS::IAM::Role
      Condition: CreatePrimaryOnlyResources
      Properties: 
        RoleName: HCOM-EC2-Server-Role
        Description: Attach to EC2 instances
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns: 
          - {"Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"}
          - {"Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"}
          - {"Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonS3ReadOnlyAccess"}
          - {"Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedEC2InstanceDefaultPolicy"}
        Path: /
        Tags:
        - Key: "Owner"
          Value: !Ref OwnerTag
  
  EC2IamRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreatePrimaryOnlyResources
    Properties: 
      InstanceProfileName: HCOM-EC2Profile
      Path: "/"
      Roles: 
         - !Ref EC2ServerRole

  HCOMOnPremRole:
    Type: AWS::IAM::Role
    Condition: CreatePrimaryOnlyResources
    Properties: 
      RoleName: HCOM-AmazonEC2RunCommandRoleForManagedInstances
      Description: Role for manageing on-prem instances
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - {"Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMDirectoryServiceAccess"}
        - {"Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"}
        - {"Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentAdminPolicy"}
        - {"Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"}
      Path: /
      Policies: 
        - PolicyName: HCOM-OnPrem-User
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'events:PutEvents'
                Resource: 
                  - !Sub "arn:${AWS::Partition}:events:${CentralRegion}:${AWS::AccountId}:event-bus/default"
                  - !Sub "arn:${AWS::Partition}:events:${SecondaryRegion}:${AWS::AccountId}:event-bus/default"

  HCOMOnPremUser:
    Type: AWS::IAM::User
    Condition: CreatePrimaryOnlyResources
    Properties: 
      ManagedPolicyArns: 
        - {"Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"}
        - {"Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentAdminPolicy"}
        - {"Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"}
      Path: /
      Policies: 
        - PolicyName: HCOM-OnPrem-User
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: 
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"
              - Effect: Allow
                Action:
                  - 'ssm:RemoveTagsFromResource'
                  - 'ssm:AddTagsToResource'
                  - 'ssm:CreateActivation'
                  - 'events:PutEvents'
                Resource: "*"
      Tags: 
        - Key: "Owner"
          Value: !Ref OwnerTag
      UserName: HCOM-onprem-user

  OnPremSSMAgentConfgRunDoc: 
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 'Run a script on OnPrem servers to manage SSM Agent Config and other settings'
        parameters:
          commands:
            type: String
            description: "Copy standard configuration files"
            default: !Sub |
              Import-Module AWSPowerShell; 
              
              echo '--- Copying ssm agent config template and updated cloudwatch agent start script. ---'
              aws s3 cp s3://${CentralS3Bucket}/scripts/amazon-ssm-agent.json "C:\ProgramData\Amazon\SSM\Download\amazon-ssm-agent.json" --region ${CentralRegion};
              aws s3 cp s3://${CentralS3Bucket}/scripts/amazon-cloudwatch-agent-ctl.ps1 "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" --region ${CentralRegion};
              aws s3 cp s3://${CentralS3Bucket}/scripts/custom-metric-status.txt "C:\ProgramData\Amazon\SSM\Download\custom-metric-status.txt" --region ${CentralRegion};
              
              #copy "C:\ProgramData\Amazon\SSM\Download\amazon-ssm-agent.json" "c:\Program Files\Amazon\SSM\amazon-ssm-agent.json";
              # create json based EventBridge Event;
              #echo '--- Creating eventbridge event json files ---';
              echo '--- Creating startup and shutdown scripts that create eventbridge events to invoke automations. ---';
              ### Start script;
              $instanceid2 = Invoke-Expression "& `"C:\Program Files\Amazon\SSM\ssm-cli.exe`" get-instance-information"
              $instance = ConvertFrom-Json $instanceid2
              $instanceid = $instance."instance-id"
              echo '--- current instance id:' $instanceid;
              $json1 ='"[{\"Source\":\"hcom.onprem\",\"DetailType\":\"OnPrem-Instance-State-Change-Notification\",\"Detail\":\"{\\\"instance-id\\\":\\\"' + $instanceid + '\\\",\\\"state\\\":\\\"stopped\\\"}\"}]"'
              $step6 = 'echo $json;'
              $step7 = 'aws events put-events --entries $json;'
              $stopscript = "$" + "json='" + $json1 + "';" + $step6 + $step7;
              echo $stopscript;
              $stopscript | Out-File -Encoding "Default" "C:\ProgramData\Amazon\SSM\Download\stop.ps1";
              $json2 ='"[{\"Source\":\"hcom.onprem\",\"DetailType\":\"OnPrem-Instance-State-Change-Notification\",\"Detail\":\"{\\\"instance-id\\\":\\\"' + $instanceid + '\\\",\\\"state\\\":\\\"running\\\"}\"}]"'
              $startscript = "$" + "json='" + $json2 + "';" + $step6 + $step7;
              $startscript | Out-File -Encoding "Default" "C:\ProgramData\Amazon\SSM\Download\start.ps1";

              #create startup and shutdown script triggers;
              Unregister-ScheduledJob StartEvent
              $trigger = New-JobTrigger -AtStartup -RandomDelay 00:00:30;
              Register-ScheduledJob -Trigger $trigger -FilePath C:\ProgramData\Amazon\SSM\Download\start.ps1 -Name StartEvent;
          LinuxCommands:
            type: String
            description: "Copy standard configuration files"
            default: !Sub |
              ### install awscli
              #echo '--- install/update awscli'
              #sudo yum install curl unzip -y
              #curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              #unzip awscliv2.zip
              #sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
              ### initialize AWS settings are variables
              echo '--- initial aws region and detect instanceid'
              awsregion=$(aws configure get region);
              if [ "$awsregion" = '' ]; then aws configure set region ${AWS::Region}; fi;
              #instance=$(ls -al /var/lib/amazon/ssm | grep -oe "mi-.*")
              instanceid=$(ssm-cli get-instance-information | grep -o '"instance-id":"[^"]*' | grep -o '[^"]*$')
              echo 'instance' $instanceid;
              ### setup startup and shutdown scripts in /etc/amazon/ssm/files
              sudo mkdir /etc/amazon/ssm/files
              sudo chmod 777 /etc/amazon/ssm/files
              sudo rm -f /etc/amazon/ssm/files/start.json /etc/amazon/ssm/files/stop.json
              echo '--- create stop and start files ---'
              echo '[{"DetailType": "OnPrem-Instance-State-Change-Notification","Source": "hcom.onprem","Detail": "{\"instance-id\": \"replaceid\",\"state\": \"running\"}"}]' | sudo tee /etc/amazon/ssm/files/start.json
              echo '[{"DetailType": "OnPrem-Instance-State-Change-Notification","Source": "hcom.onprem","Detail": "{\"instance-id\": \"replaceid\",\"state\": \"stopped\"}"}]' | sudo tee /etc/amazon/ssm/files/stop.json
              #### add local instance id to start and stop event json
              echo '--- update start and stop with instance id ---'
              sed -i "s|replaceid|$instanceid|" /etc/amazon/ssm/files/start.json
              sed -i "s|replaceid|$instanceid|" /etc/amazon/ssm/files/stop.json
              #echo "aws events put-events --entries file://start.json" | sudo tee /etc/amazon/ssm/files/startup_script.sh; sudo chmod +x /etc/amazon/ssm/files/startup_script.sh
              #echo "aws events put-events --entries file://stop.json" | sudo tee /etc/amazon/ssm/files/shutdown_script.sh; sudo chmod +x /etc/amazon/ssm/files/shutdown_script.sh
              #sudo yum -y install awscli # don't use yum, use pip3
              echo '--- copy amazon-cloudwatch-agent-ctl to bin folder'
              aws s3 cp s3://${CentralS3Bucket}/scripts/amazon-cloudwatch-agent-ctl.sh /etc/amazon/ssm/files/amazon-cloudwatch-agent-ctl --region ${CentralRegion};
              cp /etc/amazon/ssm/files/amazon-cloudwatch-agent-ctl /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl
              echo '--- copy ssm-agent-json to files folder'
              aws s3 cp s3://${CentralS3Bucket}/scripts/amazon-ssm-agent.json /etc/amazon/ssm/files/amazon-ssm-agent.json
              echo '--- copy onprem-startup.ini to files'
              aws s3 cp s3://${CentralS3Bucket}/scripts/hcom-onprem-startup.ini /etc/amazon/ssm/files/hcom-onprem-startup.ini
              echo '--- copy json to ssm folder'
              cp /etc/amazon/ssm/files/amazon-ssm-agent.json /etc/amazon/ssm/amazon-ssm-agent.json
              echo '--- copy onprem-setup.ini to system folder for .service'
              cp /etc/amazon/ssm/files/hcom-onprem-startup.ini /etc/systemd/system/hcom-startup.service
              echo '--- reload daemon'
              systemctl daemon-reload
              echo '--- enable hcom-startup.service'
              systemctl enable hcom-startup.service
              echo '--- restart ssm agent for final step'
              sudo systemctl restart amazon-ssm-agent
        mainSteps:
        - action: aws:runPowerShellScript
          name: SSMConfigWin
          precondition:
                    StringEquals:
                    - platformType
                    - Windows  
          inputs:
            timeoutSeconds: "120"
            runCommand:
              - "{{ commands }}"
        - action: aws:runShellScript
          name: SSMConfigLinux
          precondition:
                    StringEquals:
                    - platformType
                    - Linux
          inputs:
            timeoutSeconds: "90"
            runCommand:
              - "{{ LinuxCommands }}"
      DocumentType: Command
      Name: "HCOM-Manage-OnPremise-Instances-"

  PushRDSStateEBRulePrim:
    Type: AWS::Events::Rule
    Condition: CreatePrimaryOnlyResources
    Properties: 
      Description: "push RDS state changes to Central EventBridge"
      EventBusName: "default"
      EventPattern:
        source:  
          - "aws.rds"
        detail-type: 
          - "RDS DB Instance Event"
        detail:
          EventID: 
            - "RDS-EVENT-0088"
            - "RDS-EVENT-0087"
            - "RDS-EVENT-0003"
            - "RDS-EVENT-0005"
      Name: "HCOM-Tenant-Push-RDS-Events-To-Central"
      State: "ENABLED"
      Targets: 
        - 
          Arn: {"Fn::Sub": "arn:${AWS::Partition}:events:${CentralRegion}:${CentralAccount}:event-bus/HCOM-Central-EB"}
          Id: Target1
          RoleArn: !GetAtt 
            - EventBridgeIAMrole
            - Arn
          DeadLetterConfig:
            Arn: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${CentralAccount}:HCOM-DeadLetterQueue

  PushDynamoDBEBRulePrim:
    Type: AWS::Events::Rule
    Condition: CreatePrimaryOnlyResources
    Properties: 
      Description: "push DynamoDB events to Central Account"
      EventBusName: "default"
      EventPattern:
        source:  
          - "aws.dynamodb"
        detail-type: 
          - "AWS API Call via CloudTrail"
        detail:
          eventSource: 
            - "dynamodb.amazonaws.com"
          eventName: 
            - "CreateTable"
            - "DeleteTable"
            - "TagResource"
      Name: "HCOM-Tenant-Push-DynamoDB-Events-To-Central"
      State: "ENABLED"
      Targets: 
        - 
          Arn: {"Fn::Sub": "arn:${AWS::Partition}:events:${CentralRegion}:${CentralAccount}:event-bus/HCOM-Central-EB"}
          Id: Target1
          RoleArn: !GetAtt EventBridgeIAMrole.Arn
          DeadLetterConfig:
            Arn: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${CentralAccount}:HCOM-DeadLetterQueue

  PushRDSTagEBRulePrim:
    Type: AWS::Events::Rule
    Condition: CreatePrimaryOnlyResources
    Properties: 
      Description: "push RDS tag changes to Central EventBridge"
      EventBusName: "default"
      EventPattern:
        source:  
          - "aws.tag"
        detail-type: 
          - "Tag Change on Resource"
        detail:
          service: 
            - "rds"
      Name: "HCOM-Tenant-Push-RDS-Tag-Events-To-Central"
      State: "ENABLED"
      Targets: 
        - 
          Arn: {"Fn::Sub": "arn:${AWS::Partition}:events:${CentralRegion}:${CentralAccount}:event-bus/HCOM-Central-EB"}
          Id: Target1
          RoleArn: !GetAtt 
            - EventBridgeIAMrole
            - Arn
          DeadLetterConfig:
            Arn: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${CentralAccount}:HCOM-DeadLetterQueue

  LocalBackupVault:
    Type: AWS::Backup::BackupVault
    Properties: 
      BackupVaultName: Local-Backup-Vault
      LockConfiguration:
        MinRetentionDays: 1
        MaxRetentionDays: 2
      EncryptionKeyArn: !Sub 'arn:${AWS::Partition}:kms:${CentralRegion}:${CentralAccount}:key/${HCOMKey}'
      AccessPolicy:
        Version: "2012-10-17"
        Statement:
            - Effect: "Allow"
              Principal: 
                AWS:
                  - !Sub 'arn:${AWS::Partition}:iam::${CentralAccount}:root'
              Action: 
                - 'backup:CopyIntoBackupVault'
              Resource: "*"
            
      BackupVaultTags: 
        "Owner": !Ref OwnerTag

  LocalBackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: "LocalBackupPlan"
        BackupPlanRule:
          - RuleName: "LocalBackupRule"
            TargetBackupVault: !Ref LocalBackupVault
            ScheduleExpression: "cron(0 12 ? * MON-FRI *)"
            StartWindowMinutes: 60
            CompletionWindowMinutes: 180
            Lifecycle:
              DeleteAfterDays: 1
            CopyActions:
              - DestinationBackupVaultArn: !Sub "arn:${AWS::Partition}:backup:${CentralRegion}:${CentralAccount}:backup-vault:Central-Backup-Vault"
                Lifecycle:
                  DeleteAfterDays: 2
        AdvancedBackupSettings:
          - BackupOptions: {"WindowsVSS":"enabled"}
            ResourceType: "EC2"

  LocalBackupSelection:
    Type: AWS::Backup::BackupSelection
    Properties: 
      BackupPlanId: !Ref LocalBackupPlan
      BackupSelection: 
        IamRoleArn: !GetAtt [LocalBackupRole, Arn]
        SelectionName: AllCloudWatchManagedResources
        Resources:
          - '*'
        Conditions:
          StringLike:
            - ConditionKey: "aws:ResourceTag/CloudWatch-Profile"
              ConditionValue: "*"

  LocalBackupRole:
    Type: AWS::IAM::Role
    Condition: CreatePrimaryOnlyResources
    Properties: 
      RoleName: HCOM-Local-Backup-Role
      Description: For deployment tenant accounts (in a cross-account environment) grants local backup plans
      ManagedPolicyArns: 
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - backup.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies: 
        - PolicyName: HCOM-Backup-Encryption
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                  - 'kms:ReEncrypt*'
                  - 'kms:GenerateDataKey*'
                  - 'kms:DescribeKey'
                  - 'kms:CreateGrant'
                  - 'kms:GetKeyRotationStatus'
                  - 'kms:GetPublicKey'
                  - 'kms:ListGrants'
                  - 'kms:RetireGrant'
                  - 'kms:RevokeGrant'
                  - 'kms:Sign'
                  - 'kms:Verify'
                Resource: !Sub 'arn:${AWS::Partition}:kms:${CentralRegion}:${CentralAccount}:key/${HCOMKey}'
